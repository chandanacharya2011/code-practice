// Hash Map solution
// Time Complexity: O(N)
// Space Complexity: O(N)

class Solution {
    public int majorityElement(int[] nums) {
        
        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        
        for(int i=0; i<n; i++){
            
            
            if(!map.containsKey(nums[i])){
                map.put(nums[i], 1);
            }else{
                map.put(nums[i], map.get(nums[i]) + 1);
            }
        }
        
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            
            if(entry.getValue() > n/2 ){
                return entry.getKey();
            }
        }
        return -1;
    }
}

// Check for 'Boyer-Moore Voting Algorithm' & 'Divide and Conquer' approach.

O(N) time, O(1) space

class Solution {
    public int majorityElement(int[] nums) {
        
        int count = 0;
        int candidate = 0;
        for(int value: nums){
            if(count == 0){
                candidate = value;
            }
            
            count += (value == candidate) ? 1 : -1;
        }
        
        return candidate;
    }
}
